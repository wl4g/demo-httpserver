{{- $webApp := "demo-httpserver" }}

{{- $demoHttpServerBaselineTag := index .Values "demo-httpserver" "image" "baselineTag" }}

{{- if eq (index .Values $webApp "governance" "type") "Istio" }}
    {{- $domain := index .Values $webApp "governance" "istio" "ingress" "domain" }}
1. Add istio injection label:

    kubectl label ns {{ .Release.Namespace }} istio-injection=enabled --overwrite

2. Generating self credentials:

    openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=wl4g Inc./CN=*.{{ $domain }}' -keyout {{ $domain }}.key -out {{ $domain }}.crt
    kubectl create -n istio-system secret tls wl4g-credential --key={{ $domain }}.key --cert={{ $domain }}.crt

3. The access requests routed through Istio-ingressgateway using NodePort:

    export nodeIp=$(ip a | grep -E '^[0-9]+: (em|eno|enp|ens|eth|wlp)+[0-9]' -A2 | grep inet | awk -F ' ' '{print $2}' | cut -f1 -d/ | head -1)
    export istioInNodePort=$(kubectl -n istio-system get svc istio-ingressgateway -ojson | jq -r '.spec.ports[] | select (.name == "http2") | .nodePort')
    curl -vk -H 'Host: {{ $webApp }}.{{ $domain }}' ${nodeIp}:${istioInNodePort}/demo/echo?name=jack
{{- end }}

4. Here an example of what you should execution command-line on your next grayscale upgrade (canary):

    helm -n demo upgrade --install demo demo-stack --set="\
        demo-httpserver.image.baselineTag={{ $demoHttpServerBaselineTag }},\
        demo-httpserver.image.upgradeTag=latest,\
        demo-httpserver.governance.istio.ingress.http.canary.baseline.weight=80,\
        demo-httpserver.governance.istio.ingress.http.canary.upgrade.weight=20"
